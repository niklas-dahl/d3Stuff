(function() {
  var container, defs, discData, discs, fill, height, maxRadius, pattern, rotate, svg, updateDiscs, width;

  width = 960;

  height = 500;

  fill = d3.scale.category10();

  svg = d3.select('body').append('svg').attr('width', width).attr('height', height).append('g').attr('transform', 'scale(2)');

  defs = svg.append('defs');

  pattern = defs.append('pattern').attr('id', 'image').attr('patternUnits', 'userSpaceOnUse').attr('height', '200').attr('width', '200');

  container = svg.append('g').attr("transform", "translate(0, 0)");

  pattern.append('image').attr('x', 0).attr('y', 0).attr('height', '200').attr('width', '200').attr('xlink:href', "image4.jpg");

  svg.append('text').attr('x', 10).attr('y', height - 10).text("Created with Fivas");

  discData = [8, 7, 6, 5, 4, 3, 2, 1];

  maxRadius = 100;

  discs = null;

  updateDiscs = function(data, radius) {
    if (radius == null) {
      radius = maxRadius;
    }
    discs = container.selectAll('.disc').data(data);
    discs.enter().append('circle').attr('class', 'disc');
    discs.transition().attr('r', function(d) {
      return radius * d / data.length;
    }).attr('cx', 100).attr('cy', 100).style('fill', "url(#image)");
    return discs.exit().remove();
  };

  updateDiscs(discData);

  rotate = function(deg) {
    return function(d, i, a) {
      deg = ((discData.length - d + 1) * 2) * 180;
      if (i % 2 === 0) {
        deg = -deg;
      }
      return d3.interpolateString("rotate(0, 100, 100)", "rotate(" + deg + ", 100, 100)");
    };
  };

  d3.select('#dividers').on('input', function() {
    var j, ref, results;
    d3.select('#dividersValue').text(this.value);
    discData = (function() {
      results = [];
      for (var j = ref = this.value; ref <= 1 ? j <= 1 : j >= 1; ref <= 1 ? j++ : j--){ results.push(j); }
      return results;
    }).apply(this);
    return updateDiscs(discData);
  });

  d3.select('#maxRadius').on('input', function() {
    d3.select('#maxRadiusValue').text(this.value);
    maxRadius = this.value;
    return updateDiscs(discData, maxRadius);
  });

  d3.select('#start').on('click', function() {
    var oldWidth;
    oldWidth = discs.style('stroke-width');
    discs.style('stroke-width', 0);
    return discs.transition().duration(5000).attrTween('transform', rotate(180)).each('end', function() {
      return discs.style('stroke-width', oldWidth);
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,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bnRlbnQiOlsid2lkdGggPSA5NjBcclxuaGVpZ2h0ID0gNTAwXHJcbmZpbGwgPSBkMy5zY2FsZS5jYXRlZ29yeTEwKClcclxuXHJcbnN2ZyA9IGQzLnNlbGVjdCgnYm9keScpLmFwcGVuZCgnc3ZnJylcclxuICAuYXR0cignd2lkdGgnLCB3aWR0aClcclxuICAuYXR0cignaGVpZ2h0JywgaGVpZ2h0KVxyXG4gICAgLmFwcGVuZCgnZycpXHJcbiAgICAuYXR0cigndHJhbnNmb3JtJywgJ3NjYWxlKDIpJylcclxuXHJcbmRlZnMgPSBzdmcuYXBwZW5kKCdkZWZzJylcclxuXHJcbnBhdHRlcm4gPSBkZWZzLmFwcGVuZCgncGF0dGVybicpXHJcbiAgLmF0dHIoJ2lkJywgJ2ltYWdlJylcclxuICAuYXR0cigncGF0dGVyblVuaXRzJywgJ3VzZXJTcGFjZU9uVXNlJylcclxuICAuYXR0cignaGVpZ2h0JywgJzIwMCcpXHJcbiAgLmF0dHIoJ3dpZHRoJywgJzIwMCcpXHJcblxyXG5jb250YWluZXIgPSBzdmcuYXBwZW5kKCdnJylcclxuICAuYXR0cihcInRyYW5zZm9ybVwiLCBcInRyYW5zbGF0ZSgwLCAwKVwiKVxyXG5cclxucGF0dGVybi5hcHBlbmQoJ2ltYWdlJylcclxuICAuYXR0cigneCcsIDApXHJcbiAgLmF0dHIoJ3knLCAwKVxyXG4gIC5hdHRyKCdoZWlnaHQnLCAnMjAwJylcclxuICAuYXR0cignd2lkdGgnLCAnMjAwJylcclxuICAuYXR0cigneGxpbms6aHJlZicsIFwiaW1hZ2U0LmpwZ1wiKVxyXG4gIFxyXG5zdmcuYXBwZW5kKCd0ZXh0JylcclxuICAuYXR0cigneCcsIDEwKVxyXG4gIC5hdHRyKCd5JywgaGVpZ2h0LTEwKVxyXG4gIC50ZXh0KFwiQ3JlYXRlZCB3aXRoIEZpdmFzXCIpXHJcblxyXG5kaXNjRGF0YSA9IFs4IC4uMV1cclxubWF4UmFkaXVzID0gMTAwXHJcbmRpc2NzID0gbnVsbFxyXG51cGRhdGVEaXNjcyA9IChkYXRhLCByYWRpdXM9bWF4UmFkaXVzKSAtPlxyXG4gIGRpc2NzID0gY29udGFpbmVyLnNlbGVjdEFsbCgnLmRpc2MnKS5kYXRhKGRhdGEpXHJcblxyXG4gIGRpc2NzLmVudGVyKCkuYXBwZW5kKCdjaXJjbGUnKVxyXG4gICAgLmF0dHIoJ2NsYXNzJywgJ2Rpc2MnKVxyXG5cclxuICBkaXNjcy50cmFuc2l0aW9uKClcclxuICAgIC5hdHRyKCdyJywgKGQpIC0+IHJhZGl1cypkL2RhdGEubGVuZ3RoKVxyXG4gICAgLmF0dHIoJ2N4JywgMTAwKVxyXG4gICAgLmF0dHIoJ2N5JywgMTAwKVxyXG4gICAgLnN0eWxlKCdmaWxsJywgXCJ1cmwoI2ltYWdlKVwiKVxyXG5cclxuICBkaXNjcy5leGl0KCkucmVtb3ZlKClcclxuXHJcbnVwZGF0ZURpc2NzKGRpc2NEYXRhKVxyXG5cclxucm90YXRlID0gKGRlZykgLT4gXHJcbiAgKGQsaSxhKSAtPlxyXG4gICAgZGVnID0gKChkaXNjRGF0YS5sZW5ndGgtZCsxKSAqMikgKiAxODBcclxuICAgIGlmIGklMiA9PSAwIHRoZW4gZGVnID0gLWRlZ1xyXG4gICAgZDMuaW50ZXJwb2xhdGVTdHJpbmcoXCJyb3RhdGUoMCwgMTAwLCAxMDApXCIsIFwicm90YXRlKCN7ZGVnfSwgMTAwLCAxMDApXCIpXHJcblxyXG5cclxuZDMuc2VsZWN0KCcjZGl2aWRlcnMnKS5vbiAnaW5wdXQnLCAoKSAtPlxyXG4gICMgdXBkYXRlIGd1aVxyXG4gIGQzLnNlbGVjdCgnI2RpdmlkZXJzVmFsdWUnKS50ZXh0KHRoaXMudmFsdWUpXHJcblxyXG4gIGRpc2NEYXRhID0gW3RoaXMudmFsdWUgLi4gMV1cclxuICB1cGRhdGVEaXNjcyhkaXNjRGF0YSlcclxuXHJcbmQzLnNlbGVjdCgnI21heFJhZGl1cycpLm9uICdpbnB1dCcsICgpIC0+XHJcbiAgIyB1cGRhdGUgZ3VpXHJcbiAgZDMuc2VsZWN0KCcjbWF4UmFkaXVzVmFsdWUnKS50ZXh0KHRoaXMudmFsdWUpXHJcbiAgbWF4UmFkaXVzID0gdGhpcy52YWx1ZVxyXG4gIHVwZGF0ZURpc2NzKGRpc2NEYXRhLCBtYXhSYWRpdXMpXHJcblxyXG5kMy5zZWxlY3QoJyNzdGFydCcpLm9uICdjbGljaycsICgpIC0+XHJcbiAgb2xkV2lkdGggPSBkaXNjcy5zdHlsZSgnc3Ryb2tlLXdpZHRoJylcclxuICBkaXNjcy5zdHlsZSgnc3Ryb2tlLXdpZHRoJywgMClcclxuXHJcbiAgZGlzY3MudHJhbnNpdGlvbigpLmR1cmF0aW9uKDUwMDApXHJcbiAgICAuYXR0clR3ZWVuKCd0cmFuc2Zvcm0nLCByb3RhdGUoMTgwKSlcclxuICAuZWFjaCAnZW5kJywgKCkgLT5cclxuICAgIGRpc2NzLnN0eWxlKCdzdHJva2Utd2lkdGgnLCBvbGRXaWR0aCkiXX0=
