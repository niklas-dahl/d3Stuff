(function() {
  var fill, foci, force, gradient, height, i, line, line1, line2, lineFunc, mousePosition, mouseX, mouseY, node, nodes, positionText, rect1, scaleX, svg, tick, width;

  width = 960;

  height = 500;

  fill = d3.scale.category10();

  nodes = [];

  foci = [
    {
      x: 150,
      y: 150
    }, {
      x: 350,
      y: 250
    }, {
      x: 700,
      y: 400
    }
  ];

  mouseX = mouseY = 0;

  svg = d3.select('body').append('svg').attr('width', width).attr('height', height);

  gradient = svg.append("defs").append("linearGradient").attr("id", "gradient").attr("x1", "0%").attr("y1", "0%").attr("x2", "100%").attr("y2", "100%").attr("spreadMethod", "pad");

  gradient.append("stop").attr("offset", "0%").attr("stop-color", "#0c0").attr("stop-opacity", 1);

  gradient.append("stop").attr("offset", "100%").attr("stop-color", "#c00").attr("stop-opacity", 1);

  svg.append("rect").attr("width", 100).attr("height", 100).style("fill", "url(#gradient)");

  line1 = svg.append('rect').attr('y', 0).attr('width', 1).attr('height', height).attr('fill', 'red');

  line2 = svg.append('rect').attr('y', 0).attr('height', 1).attr('width', width).attr('fill', 'red');

  rect1 = svg.append('rect').attr('x', 100).attr('y', 100).attr('width', 140).attr('height', 30).attr('fill', 'blue');

  positionText = svg.append('text').attr('x', 110).attr('y', 120).attr('fill', 'white');

  scaleX = d3.scale.linear().range([0, width]).domain([0, width]);

  line = svg.append('path').style("stroke", "url(#gradient)");

  lineFunc = d3.svg.line().x(function(d) {
    return scaleX(d[0]);
  }).y(function(d) {
    return d[1];
  }).interpolate("cardinal");

  mousePosition = [];

  svg.on('mousemove', function() {
    var pos;
    pos = d3.mouse(this);
    mouseX = pos[0];
    mouseY = pos[1];
    line1.attr('x', mouseX);
    line2.attr('y', mouseY);
    return positionText.text("Mouse: (" + mouseX + ", " + mouseY + ")");
  });

  svg.on('mousedown', function() {
    var item, j, len, newPositions, pos;
    console.log('click');
    pos = d3.mouse(this);
    svg.append('circle').attr('cx', pos[0]).attr('cy', pos[1]).attr('r', 3);
    newPositions = [];
    for (j = 0, len = mousePosition.length; j < len; j++) {
      item = mousePosition[j];
      newPositions.push(item);
    }
    if (mousePosition[mousePosition.length - 1]) {
      newPositions.push(mousePosition[mousePosition.length - 1]);
    }
    mousePosition.push(pos);
    return line.attr('d', lineFunc(newPositions)).transition().attr('d', lineFunc(mousePosition));
  });

  node = svg.selectAll('circle');

  tick = function(e) {
    var k;
    k = .1 * e.alpha;
    nodes.forEach(function(o, i) {
      o.y += (mouseY - o.y) * k;
      return o.x += (mouseX - o.x) * k;
    });
    return node.attr('cx', function(d) {
      return d.x;
    }).attr('cy', function(d) {
      return d.y;
    });
  };

  force = d3.layout.force().nodes(nodes).links([]).gravity(0).charge(-30).size([width, height]).on('tick', tick);

  i = 0;

  setInterval((function() {
    i += 100;
    return nodes.push({
      id: ~~(Math.random() * foci.length)
    });
  }), 500);

}).call(this);

//# sourceMappingURL=data:application/json;base64,
