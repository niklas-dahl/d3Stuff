(function() {
  var canvas, divier, fill, getImagePixel, height, imgHeight, imgWidth, initImage, interval, pixelNum, pixelWidth, pixels, render, svg, width, xOffset, yOffset;

  width = 960;

  height = 1300;

  fill = d3.scale.category10();

  canvas = null;

  initImage = function() {
    var img;
    img = document.getElementById('img');
    img.crossOrigin = "Anonymous";
    canvas = document.createElement('canvas');
    canvas.width = img.width;
    canvas.height = img.height;
    return canvas.getContext('2d').drawImage(img, 0, 0, img.width, img.height);
  };

  getImagePixel = function(x, y) {
    if (!canvas) {
      initImage();
    }
    return canvas.getContext('2d').getImageData(x, y, 1, 1).data;
  };

  svg = d3.select('body').append('svg').attr('width', width).attr('height', height);

  pixelNum = 0;

  imgWidth = 66;

  imgHeight = 68;

  pixelWidth = 14;

  xOffset = 30;

  yOffset = 30;

  pixels = [];

  render = function() {
    var elm;
    elm = svg.selectAll('circle').data(pixels);
    return elm.enter().append('circle').attr('r', 100).attr('cx', width / 2).attr('cy', height).style('fill', function(d, i) {
      return d3.rgb(d.color[0], d.color[1], d.color[2]);
    }).transition().duration(3000).attr('r', pixelWidth / 2).attr('cx', function(d) {
      return d.imgX * pixelWidth + xOffset;
    }).attr('cy', function(d) {
      return d.imgY * pixelWidth + yOffset;
    });
  };

  divier = 5;

  interval = setInterval(function() {
    var x, y;
    y = parseInt(pixelNum / imgWidth);
    x = pixelNum % imgWidth;
    if (y % 2 === 1) {
      x = imgWidth - 1 - x;
    }
    getImagePixel(x, y);
    pixels.push({
      imgX: x,
      imgY: y,
      color: getImagePixel(x * 10, y * 10)
    });
    render();
    pixelNum += divier;
    if (pixelNum > imgWidth * imgHeight) {
      if (pixelNum % divier + 1 === divier) {
        clearInterval(interval);
      }
      return pixelNum = pixelNum % divier + 1;
    }
  }, 10);

  console.log('image ');

}).call(this);

//# sourceMappingURL=data:application/json;base64,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LENBQUEsR0FBSSxRQUFBLEdBQVc7SUFDZixJQUFHLENBQUEsR0FBRSxDQUFGLEtBQU8sQ0FBVjtNQUNFLENBQUEsR0FBSSxRQUFBLEdBQVMsQ0FBVCxHQUFhLEVBRG5COztJQUdBLGFBQUEsQ0FBYyxDQUFkLEVBQWlCLENBQWpCO0lBRUEsTUFBTSxDQUFDLElBQVAsQ0FBWTtNQUNWLElBQUEsRUFBTSxDQURJO01BRVYsSUFBQSxFQUFNLENBRkk7TUFHVixLQUFBLEVBQU8sYUFBQSxDQUFjLENBQUEsR0FBRSxFQUFoQixFQUFvQixDQUFBLEdBQUUsRUFBdEIsQ0FIRztLQUFaO0lBS0EsTUFBQSxDQUFBO0lBRUEsUUFBQSxJQUFVO0lBQ1YsSUFBRyxRQUFBLEdBQVcsUUFBQSxHQUFTLFNBQXZCO01BQ0UsSUFBRyxRQUFBLEdBQVMsTUFBVCxHQUFrQixDQUFsQixLQUF1QixNQUExQjtRQUNFLGFBQUEsQ0FBYyxRQUFkLEVBREY7O2FBR0EsUUFBQSxHQUFXLFFBQUEsR0FBUyxNQUFULEdBQWtCLEVBSi9COztFQWhCcUIsQ0FBWixFQXNCVCxFQXRCUzs7RUF3QlgsT0FBTyxDQUFDLEdBQVIsQ0FBWSxRQUFaO0FBdEVBIiwiZmlsZSI6ImltYWdlLmpzIiwic291cmNlUm9vdCI6Ii9zb3VyY2UvIiwic291cmNlc0NvbnRlbnQiOlsid2lkdGggPSA5NjBcclxuaGVpZ2h0ID0gMTMwMFxyXG5maWxsID0gZDMuc2NhbGUuY2F0ZWdvcnkxMCgpXHJcblxyXG5jYW52YXMgPSBudWxsXHJcbmluaXRJbWFnZSA9ICgpIC0+XHJcbiAgaW1nID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2ltZycpXHJcbiAgaW1nLmNyb3NzT3JpZ2luID0gXCJBbm9ueW1vdXNcIlxyXG4gIGNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpXHJcbiAgY2FudmFzLndpZHRoID0gaW1nLndpZHRoXHJcbiAgY2FudmFzLmhlaWdodCA9IGltZy5oZWlnaHRcclxuICBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKS5kcmF3SW1hZ2UoaW1nLCAwLCAwLCBpbWcud2lkdGgsIGltZy5oZWlnaHQpXHJcbiAgXHJcbmdldEltYWdlUGl4ZWwgPSAoeCwgeSkgLT5cclxuICBpZiAhY2FudmFzXHJcbiAgICBpbml0SW1hZ2UoKVxyXG5cclxuICBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKS5nZXRJbWFnZURhdGEoeCwgeSwgMSwgMSkuZGF0YTtcclxuXHJcbnN2ZyA9IGQzLnNlbGVjdCgnYm9keScpLmFwcGVuZCgnc3ZnJylcclxuICAuYXR0cignd2lkdGgnLCB3aWR0aClcclxuICAuYXR0cignaGVpZ2h0JywgaGVpZ2h0KVxyXG5cclxucGl4ZWxOdW0gPSAwXHJcbmltZ1dpZHRoID0gNjZcclxuaW1nSGVpZ2h0ID0gNjhcclxuXHJcbnBpeGVsV2lkdGggPSAxNFxyXG54T2Zmc2V0ID0gMzBcclxueU9mZnNldCA9IDMwXHJcblxyXG5waXhlbHMgPSBbXVxyXG5yZW5kZXIgPSAoKSAtPlxyXG4gIGVsbSA9IHN2Zy5zZWxlY3RBbGwoJ2NpcmNsZScpLmRhdGEocGl4ZWxzKVxyXG5cclxuICBlbG0uZW50ZXIoKS5hcHBlbmQoJ2NpcmNsZScpXHJcbiAgICAuYXR0cigncicsIDEwMClcclxuICAgIC5hdHRyKCdjeCcsIHdpZHRoLzIpXHJcbiAgICAuYXR0cignY3knLCBoZWlnaHQpXHJcbiAgICAuc3R5bGUoJ2ZpbGwnLCAoZCwgaSkgLT4gZDMucmdiKGQuY29sb3JbMF0sIGQuY29sb3JbMV0sIGQuY29sb3JbMl0pIClcclxuICAudHJhbnNpdGlvbigpLmR1cmF0aW9uKDMwMDApIy5lYXNlKE1hdGguc3FydClcclxuICAgIC5hdHRyKCdyJywgcGl4ZWxXaWR0aC8yKVxyXG4gICAgLmF0dHIoJ2N4JywgKGQpIC0+IGQuaW1nWCpwaXhlbFdpZHRoICsgeE9mZnNldClcclxuICAgIC5hdHRyKCdjeScsIChkKSAtPiBkLmltZ1kqcGl4ZWxXaWR0aCArIHlPZmZzZXQpXHJcblxyXG5kaXZpZXIgPSA1XHJcbmludGVydmFsID0gc2V0SW50ZXJ2YWwgKCkgLT5cclxuICB5ID0gcGFyc2VJbnQoIHBpeGVsTnVtIC8gaW1nV2lkdGggKVxyXG4gIHggPSBwaXhlbE51bSAlIGltZ1dpZHRoXHJcbiAgaWYgeSUyID09IDFcclxuICAgIHggPSBpbWdXaWR0aC0xIC0geCBcclxuXHJcbiAgZ2V0SW1hZ2VQaXhlbCh4LCB5KVxyXG5cclxuICBwaXhlbHMucHVzaCB7XHJcbiAgICBpbWdYOiB4XHJcbiAgICBpbWdZOiB5XHJcbiAgICBjb2xvcjogZ2V0SW1hZ2VQaXhlbCh4KjEwLCB5KjEwKVxyXG4gIH1cclxuICByZW5kZXIoKVxyXG5cclxuICBwaXhlbE51bSs9ZGl2aWVyXHJcbiAgaWYgcGl4ZWxOdW0gPiBpbWdXaWR0aCppbWdIZWlnaHRcclxuICAgIGlmIHBpeGVsTnVtJWRpdmllciArIDEgPT0gZGl2aWVyXHJcbiAgICAgIGNsZWFySW50ZXJ2YWwoaW50ZXJ2YWwpXHJcbiAgICAgIFxyXG4gICAgcGl4ZWxOdW0gPSBwaXhlbE51bSVkaXZpZXIgKyAxXHJcblxyXG4sIDEwXHJcblxyXG5jb25zb2xlLmxvZyAnaW1hZ2UgJyJdfQ==
