(function() {
  var colorScale, flowerInformationPath, graph, innerHeight, margin, outerHeight, renderData, svg, type, xAxisG, yAxisG;

  outerHeight = 800;

  margin = {
    top: 30,
    right: 30,
    bottom: 40,
    left: 40
  };

  innerHeight = outerHeight - margin.top - margin.bottom;

  svg = d3.select('#svgContainer').append('svg').attr('height', outerHeight);

  graph = svg.append('g').attr('transform', "translate(" + margin.left + ", " + margin.top + ")").attr('class', 'graphContent');

  xAxisG = graph.append('g').attr('transform', "translate(0, " + innerHeight + ")");

  yAxisG = graph.append('g');

  colorScale = d3.scale.category10();

  renderData = function(data, ow) {
    var circles, innerWidth, outerWidth, xAxis, xDomain, xScale, yAxis, yDomain, yScale;
    outerWidth = ow;
    innerWidth = outerWidth - margin.left - margin.right;
    xDomain = d3.extent(data, function(d) {
      return d.sepal_length;
    });
    xScale = d3.scale.linear().domain(xDomain).range([0, innerWidth]);
    yDomain = d3.extent(data, function(d) {
      return d.petal_length;
    });
    yScale = d3.scale.linear().domain(yDomain).range([innerHeight, 0]);
    xAxis = d3.svg.axis().scale(xScale).orient('bottom');
    yAxis = d3.svg.axis().scale(yScale).orient('left');
    xAxisG.call(xAxis);
    yAxisG.call(yAxis);
    circles = graph.selectAll('circle').data(data);
    circles.enter().append('circle').attr('stroke', function(d) {
      return colorScale(d.species);
    }).attr('r', 10).on('mouseover', function() {
      return d3.select(this).transition().duration(1000).attr('r', function(d) {
        return 30;
      });
    }).on('mouseout', function() {
      return d3.select(this).transition().attr('r', 10);
    });
    circles.transition().attr('cx', function(d) {
      return xScale(d.sepal_length);
    }).attr('cy', function(d) {
      return yScale(d.petal_length);
    });
    return circles.exit().transition().duration(100).attr('r', 0).each('end', function() {
      return d3.select(this).remove();
    });
  };

  flowerInformationPath = 'https://raw.githubusercontent.com/curran/screencasts/gh-pages/introToD3/examples/code/snapshot73/iris.csv';

  type = function(dataPoint) {
    dataPoint.petal_length = +dataPoint.petal_length;
    dataPoint.petal_width = +dataPoint.petal_width;
    dataPoint.sepal_length = +dataPoint.sepal_length;
    dataPoint.sepal_width = +dataPoint.sepal_width;
    return dataPoint;
  };

  d3.csv(flowerInformationPath, type, function(data) {
    var i;
    window.onresize = function(event) {
      var containerWidth;
      containerWidth = +svg.style('width').replace('px', '');
      return renderData(data, containerWidth);
    };
    i = 5 * 6;
    return setInterval(function() {
      var containerWidth;
      containerWidth = +svg.style('width').replace('px', '');
      data.push({
        petal_length: (Math.sin(i / 10)) * (5 + i / 10) + 1,
        sepal_length: i / 5
      });
      i++;
      return renderData(data, containerWidth);
    }, 300);
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,
