(function() {
  var barData, bars, drag, fill, height, i, j, k, plateData, plateHeight, plates, svg, topY, width;

  width = 960;

  height = 500;

  fill = d3.scale.category10();

  svg = d3.select('body').append('svg').attr('width', width).attr('height', height);

  plateHeight = 30;

  barData = [];

  for (i = j = 0; j <= 2; i = ++j) {
    barData.push({
      num: i,
      currentElmCount: 0,
      x: 100 + i * 200,
      y: 100,
      getTopY: function() {
        return (this.y + 355) - (this.currentElmCount * (plateHeight + 10));
      }
    });
  }

  bars = svg.selectAll('.turm').data(barData).enter().append('rect').attr('class', 'turm').attr('x', function(d) {
    return d.x;
  }).attr('y', function(d) {
    return d.y;
  }).attr('width', 50).attr('height', 400);

  plateData = [];

  for (i = k = 5; k >= 1; i = --k) {
    plateData.push({
      size: i,
      position: 0,
      x: barData[0].x + 50 / 2 - ((i + 1) * 30 / 2),
      y: barData[0].getTopY()
    });
    barData[0].currentElmCount++;
  }

  topY = 80;

  drag = d3.behavior.drag();

  drag.on('drag', function(d, i) {
    d.y += d3.event.dy;
    if (d.y < topY) {
      d.x += d3.event.dx;
      if (d.dx) {
        d.x += d.dx;
        d.dx = 0;
      }
    } else {
      if (d.dx == null) {
        d.dx = 0;
      }
      d.dx += d3.event.dx;
    }
    return d3.select(this).attr('x', function(d) {
      return d.x;
    }).attr('y', function(d) {
      return d.y;
    });
  });

  plates = svg.selectAll('.plate').data(plateData).enter().append('rect').attr('id', function(d) {
    return "plate_" + d.size;
  }).attr('class', 'plate').attr('width', function(d) {
    return (d.size + 1) * 30;
  }).attr('height', plateHeight).attr('x', function(d) {
    return d.x;
  }).attr('y', function(d) {
    return d.y;
  });

  svg.select('#plate_1').transition().duration(1000).attr('y', topY).each('end', function() {
    console.log(d3.select(this));
    return d3.select(this).transition().attr('x', 0);
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,
