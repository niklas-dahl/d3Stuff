(function() {
  var data, drawLine, f, generateData, height, line, margin, outerHeight, outerWidth, stepSize, svg, updateLine, updateScale, width, xAxis, xDomain, xScale, yAxis, yDomain, yScale;

  outerWidth = 1000;

  outerHeight = 600;

  margin = {
    top: 20,
    right: 20,
    bottom: 20,
    left: 20
  };

  width = outerWidth - margin.left - margin.right;

  height = outerHeight - margin.top - margin.bottom;

  svg = d3.select('#svgContainer').append('svg').attr('width', outerWidth).attr('height', outerHeight).append('g').attr('transform', "translate(" + margin.left + ", " + margin.top + ")");

  xDomain = [-10, 10];

  yDomain = [-2, 2];

  stepSize = .01;

  xScale = d3.scale.linear().range([0, width]).domain(xDomain);

  yScale = d3.scale.linear().range([height, 0]).domain(yDomain);

  xAxis = d3.svg.axis().scale(xScale).orient('bottom');

  yAxis = d3.svg.axis().scale(yScale).orient('left');

  f = function(x) {
    return Math.sin(x * x);
  };

  line = d3.svg.line().x(function(d) {
    return xScale(d.x);
  }).y(function(d) {
    return yScale(d.y);
  });

  data = null;

  generateData = function(f) {
    var i, j, ref, results, x;
    data = [];
    results = [];
    for (i = j = 0, ref = (xDomain[1] - xDomain[0]) * (1 / stepSize); 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
      x = xDomain[0] + i * stepSize;
      results.push(data.push({
        x: x,
        y: f(x)
      }));
    }
    return results;
  };

  generateData(f);

  drawLine = function() {
    return svg.append('path').datum(data).attr('class', 'line').attr('d', line);
  };

  drawLine();

  updateLine = function() {
    return svg.select('.line').transition().duration(750).attr('d', line(data));
  };

  updateScale = function() {
    svg.select('.line').transition().duration(750).attr('d', line(data));
    svg.select('.x.axis').transition().duration(750).call(xAxis);
    return svg.select('.y.axis').transition().duration(750).call(yAxis);
  };

  svg.append('g').attr('class', 'x axis').attr('transform', "translate(0, " + (height / 2) + ")").call(xAxis);

  svg.append('g').attr('class', 'y axis').attr('transform', "translate(" + (width / 2) + ", 0)").call(yAxis);

  d3.select('button').on('click', function() {
    var error, evalFunc, input, inputField;
    inputField = d3.select('#input');
    input = document.getElementById('input').value;
    if (input.length === 0) {
      return;
    }
    input = input.replace(new RegExp('sin', 'g'), 'Math.sin');
    input = input.replace(new RegExp('cos', 'g'), 'Math.cos');
    input = input.replace(new RegExp('tan', 'g'), 'Math.tan');
    input = input.replace(new RegExp('exp', 'g'), 'Math.exp');
    evalFunc = function(x) {
      return eval(input);
    };
    try {
      generateData(evalFunc);
      return updateLine();
    } catch (error) {
      return console.log('something went wrong');
    }
  });

  d3.select('#xRange').on('change', function() {
    var value;
    value = +document.getElementById('xRange').value;
    value += 50;
    value = value || 1;
    xDomain = [-value, value];
    xScale.domain(xDomain);
    return updateScale();
  });

  d3.select('#yRange').on('change', function() {
    var value;
    value = +document.getElementById('yRange').value;
    value += 50;
    value = value || 1;
    yDomain = [-value, value];
    yScale.domain(yDomain);
    return updateScale();
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,
