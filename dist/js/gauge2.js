(function() {
  var g, gauge2, height, i, plugin, svg, width;

  plugin = {};

  plugin.addConfigurations = function(outer, obj, settings, defaults) {
    var idx, j, len, results, setting;
    results = [];
    for (idx = j = 0, len = settings.length; j < len; idx = ++j) {
      setting = settings[idx];
      obj[setting] = (function(setting) {
        return function(newVal) {
          if (arguments.length === 0) {
            return outer[setting];
          }
          outer[setting] = newVal;
          return obj;
        };
      })(setting);
      results.push(outer[setting] = defaults[idx]);
    }
    return results;
  };

  plugin.gauge = function() {
    var arcTween, bottumText, gauge, max, min, renderValue, value;
    min = 0;
    max = 100;
    value = 0;
    renderValue = 0;
    bottumText = 'Visitors';
    arcTween = function(arc, oldVal, newVal) {
      return function(d) {
        var i;
        i = d3.interpolateNumber(oldVal, newVal);
        return function(t) {
          return arc(i(t));
        };
      };
    };
    gauge = function(arcGroup) {
      var arc, arcElm, getTickX, getTickY, j, k, outerArc, outerOuterArc, results, results1, text, tickCount, tickScale;
      console.log("init draw " + min + ", " + max + ", " + value + ", " + text);
      arc = d3.svg.arc().startAngle(0.75 * 2 * Math.PI).endAngle(function(d) {
        return (0.75 * 2 * Math.PI) + (Math.min(Math.max(d, 0), 1) * Math.PI);
      }).innerRadius(85).outerRadius(110);
      outerArc = d3.svg.arc().startAngle(0.75 * 2 * Math.PI).endAngle(0.75 * 2 * Math.PI + Math.PI).innerRadius(85).outerRadius(110);
      outerOuterArc = d3.svg.arc().startAngle(0.75 * 2 * Math.PI).endAngle(0.75 * 2 * Math.PI + Math.PI).innerRadius(85).outerRadius(110);
      text = arcGroup.append('text').attr('y', -25).attr('class', 'innerText').text((Math.round(value)) + "%");
      arcGroup.append('text').attr('y', 0).style('text-anchor', 'middle').style('fill', 'black').style('font-size', '1.2em').text(bottumText);
      arcGroup.append('path').attr('d', outerArc).attr('class', 'outline');
      renderValue = value / (max - min);
      arcElm = arcGroup.append('path').data([renderValue]).attr('d', function(d) {
        return arc(d);
      }).attr('class', 'bar');
      tickCount = 5;
      getTickX = function(n, rad) {
        var deg, pos;
        pos = n / tickCount;
        deg = -Math.PI + pos * Math.PI;
        return Math.cos(deg) * rad;
      };
      getTickY = function(n, rad) {
        var deg, pos;
        pos = n / tickCount;
        deg = -Math.PI + pos * Math.PI;
        return Math.sin(deg) * rad;
      };
      arcGroup.selectAll('.ticks').data((function() {
        results = [];
        for (var j = 0; 0 <= tickCount ? j <= tickCount : j >= tickCount; 0 <= tickCount ? j++ : j--){ results.push(j); }
        return results;
      }).apply(this)).enter().append('line').attr('class', 'tick').attr('x1', function(d) {
        return getTickX(d, 110);
      }).attr('y1', function(d) {
        return getTickY(d, 110);
      }).attr('x2', function(d) {
        return getTickX(d, 85);
      }).attr('y2', function(d) {
        return getTickY(d, 85);
      });
      tickScale = d3.scale.linear().range([min, max]);
      arcGroup.selectAll('.ticks').data((function() {
        results1 = [];
        for (var k = 0; 0 <= tickCount ? k <= tickCount : k >= tickCount; 0 <= tickCount ? k++ : k--){ results1.push(k); }
        return results1;
      }).apply(this)).enter().append('text').attr('class', 'tickText').attr('x', function(d) {
        return getTickX(d, 122);
      }).attr('y', function(d) {
        return getTickY(d, 122);
      }).text(function(d) {
        return tickScale(d / tickCount);
      });
      return gauge.update = function() {
        var scale;
        scale = d3.scale.linear().domain([min, max]).range([0, 1]);
        arcElm.transition().duration(1500).ease('elastic').attrTween('d', arcTween(arc, renderValue, scale(value)));
        renderValue = scale(value);
        return text.text((Math.round(value)) + "%");
      };
    };
    plugin.addConfigurations(this, gauge, ['min', 'max', 'value', 'text'], [0, 100, 76, 'no text']);
    return gauge;
  };

  console.log('gauge test 2');

  width = 800;

  height = 600;

  svg = d3.select('body').append('svg').attr('width', width).attr('height', height);

  gauge2 = plugin.gauge().min(-10).max(40).value(10).text('load');

  window.gauge = gauge2;

  svg.append('g').attr('id', 'gauge1').attr('class', 'gauge').attr('transform', "translate(" + 400. + ", " + 300. + ") scale(2)").call(gauge2);

  i = 0;

  g = .5;

  setInterval(function() {
    var newVal, oldVal;
    if (i >= 100) {
      g += .5;
      i = 0;
    }
    oldVal = i / 100;
    i += g * 10;
    newVal = i / 100;
    return gauge2.value(Math.random() * (gauge.max() - gauge.min()) + gauge.min()).update();
  }, 1000);

}).call(this);

//# sourceMappingURL=data:application/json;base64,
