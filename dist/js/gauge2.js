(function() {
  var gauge, gauge2, gauge3, height, plugin, svg, width;

  plugin = {};

  plugin.addConfigurations = function(outer, obj, settings, defaults) {
    var idx, j, len, results, setting;
    results = [];
    for (idx = j = 0, len = settings.length; j < len; idx = ++j) {
      setting = settings[idx];
      obj[setting] = (function(setting) {
        return function(newVal) {
          if (arguments.length === 0) {
            return outer[setting];
          }
          outer[setting] = newVal;
          return obj;
        };
      })(setting);
      results.push(outer[setting] = defaults[idx]);
    }
    return results;
  };

  plugin.gauge = function() {
    var arcTween, gauge, settings;
    settings = {};
    arcTween = function(arc, oldVal, newVal) {
      return function(d) {
        var i;
        i = d3.interpolateNumber(oldVal, newVal);
        return function(t) {
          return arc(i(t));
        };
      };
    };
    gauge = function(arcGroup) {
      var arc, arcElm, getTickX, getTickY, j, k, outerArc, outerOuterArc, ref, ref1, results, results1, text, tickScale;
      arc = d3.svg.arc().startAngle(0.75 * 2 * Math.PI).endAngle(function(d) {
        return (0.75 * 2 * Math.PI) + (Math.min(Math.max(d, 0), 1) * Math.PI);
      }).innerRadius(85).outerRadius(110);
      outerArc = d3.svg.arc().startAngle(0.75 * 2 * Math.PI).endAngle(0.75 * 2 * Math.PI + Math.PI).innerRadius(85).outerRadius(110);
      outerOuterArc = d3.svg.arc().startAngle(0.75 * 2 * Math.PI).endAngle(0.75 * 2 * Math.PI + Math.PI).innerRadius(85).outerRadius(110);
      text = arcGroup.append('text').attr('y', -25).attr('class', 'innerText').text("" + (settings.valueFormatter(settings.value)));
      arcGroup.append('text').attr('y', 0).style('text-anchor', 'middle').style('fill', 'black').style('font-size', '1.2em').text(settings.text);
      arcGroup.append('path').attr('d', outerArc).attr('class', 'outline');
      settings.renderValue = settings.value / (settings.max - settings.min);
      arcElm = arcGroup.append('path').data([settings.renderValue]).attr('d', function(d) {
        return arc(d);
      }).attr('class', 'bar');
      getTickX = function(n, rad) {
        var deg, pos;
        pos = n / settings.segmentCount;
        deg = -Math.PI + pos * Math.PI;
        return Math.cos(deg) * rad;
      };
      getTickY = function(n, rad) {
        var deg, pos;
        pos = n / settings.segmentCount;
        deg = -Math.PI + pos * Math.PI;
        return Math.sin(deg) * rad;
      };
      arcGroup.selectAll('.ticks').data((function() {
        results = [];
        for (var j = 0, ref = settings.segmentCount; 0 <= ref ? j <= ref : j >= ref; 0 <= ref ? j++ : j--){ results.push(j); }
        return results;
      }).apply(this)).enter().append('line').attr('class', 'tick').attr('x1', function(d) {
        return getTickX(d, 110);
      }).attr('y1', function(d) {
        return getTickY(d, 110);
      }).attr('x2', function(d) {
        return getTickX(d, 85);
      }).attr('y2', function(d) {
        return getTickY(d, 85);
      });
      tickScale = d3.scale.linear().range([settings.min, settings.max]);
      arcGroup.selectAll('.ticks').data((function() {
        results1 = [];
        for (var k = 0, ref1 = settings.segmentCount; 0 <= ref1 ? k <= ref1 : k >= ref1; 0 <= ref1 ? k++ : k--){ results1.push(k); }
        return results1;
      }).apply(this)).enter().append('text').attr('class', function(d) {
        if (!d) {
          return 'first tickText';
        }
        if (d === settings.segmentCount) {
          return 'last tickText';
        }
        return 'tickText';
      }).attr('x', function(d) {
        return getTickX(d, 122);
      }).attr('y', function(d) {
        return getTickY(d, 122);
      }).text(function(d) {
        return settings.tickFormatter(tickScale(d / settings.segmentCount));
      });
      return gauge.update = function() {
        var scale;
        scale = d3.scale.linear().domain([settings.min, settings.max]).range([0, 1]);
        arcElm.transition().duration(settings.duration).ease('elastic').attrTween('d', arcTween(arc, settings.renderValue, scale(settings.value)));
        settings.renderValue = scale(settings.value);
        return text.text(settings.valueFormatter(settings.value));
      };
    };
    plugin.addConfigurations(settings, gauge, ['min', 'max', 'value', 'text', 'segmentCount', 'tickFormatter', 'valueFormatter', 'duration'], [0, 100, 50, '', 5, d3.format(".1f"), d3.format('.1f'), 1500]);
    return gauge;
  };

  console.log('gauge test 2 start');

  width = 1000;

  height = 1000;

  svg = d3.select('body').append('svg').attr('width', width).attr('height', height);

  gauge = plugin.gauge().text('performance').duration(4000).segmentCount(3);

  gauge2 = plugin.gauge().min(-10).max(40).value(10).text('load');

  gauge3 = plugin.gauge().segmentCount(100).tickFormatter(function() {
    return '';
  }).valueFormatter(d3.format('d')).min(100).max(500).value(200);

  window.gauge = gauge2;

  svg.append('g').attr('id', 'gauge1').attr('class', 'gauge').attr('transform', "translate(" + 400. + ", " + 300. + ") scale(2)").call(gauge2);

  svg.append('g').attr('class', 'gauge').attr('transform', "translate(" + 250. + ", " + 600. + ") scale(1.5)").call(gauge);

  svg.append('g').attr('class', 'gauge').attr('transform', "translate(" + 700. + ", " + 600. + ") scale(1.5)").call(gauge3);

  setInterval(function() {
    return gauge2.value(Math.random() * (gauge2.max() - gauge2.min()) + gauge2.min()).update();
  }, 3000);

  setInterval(function() {
    return gauge3.value((gauge3.value() + 1) % gauge3.max()).update();
  }, 10);

  setInterval(function() {
    return gauge.value(Math.random() * (gauge.max() - gauge.min()) + gauge.min()).update();
  }, 5000);

}).call(this);

//# sourceMappingURL=data:application/json;base64,
