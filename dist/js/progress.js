(function() {
  var height, plugin, progress, svg, width;

  plugin = {};

  plugin.addConfigurations = function(outer, obj, settings, defaults) {
    var i, idx, len, results, setting;
    results = [];
    for (idx = i = 0, len = settings.length; i < len; idx = ++i) {
      setting = settings[idx];
      obj[setting] = (function(setting) {
        return function(newVal) {
          if (arguments.length === 0) {
            return outer[setting];
          }
          outer[setting] = newVal;
          return obj;
        };
      })(setting);
      results.push(outer[setting] = defaults[idx]);
    }
    return results;
  };

  plugin.progress = function() {
    var height, progress, settings, width;
    settings = {};
    width = 500;
    height = 30;
    progress = function(group) {
      var borderRadius, render;
      borderRadius = 10;
      group.append('rect').attr('class', 'background').attr('rx', borderRadius).attr('ry', borderRadius).attr('width', width).attr('height', height);
      render = function(data) {
        var bars, color, desc, names, values, xScale;
        if (typeof data[0] === 'object') {
          values = data.map(function(d) {
            return d.value;
          });
          names = data.map(function(d) {
            return d.description;
          });
        } else {
          values = data;
          names = [];
        }
        console.log("render " + data.length + " items");
        xScale = d3.scale.linear().domain([0, d3.sum(values)]).range([0, width]);
        if (settings.total) {
          xScale.domain([0, settings.total]);
        }
        color = d3.scale.ordinal().range(['#1BBC9B', '#EFAD4D', '#D9544F']);
        bars = group.selectAll('.bar').data(values);
        bars.enter().append('rect').attr('class', 'bar').attr('rx', function(d, idx) {
          if (!idx) {
            return borderRadius;
          }
        }).attr('ry', function(d, idx) {
          if (!idx) {
            return borderRadius;
          }
        }).style('fill', color);
        bars.transition().duration(1000).attr('x', function(d, idx) {
          return xScale(d3.sum(values.slice(0, idx)));
        }).attr('width', function(d, idx) {
          if (idx) {
            return xScale(d);
          }
          return xScale(d) + 10;
        }).attr('height', height);
        desc = group.selectAll('.desc').data(names);
        desc.enter().append('text').attr('class', 'desc').attr('y', -5).style('fill', function(d, idx) {
          return color(idx);
        }).text(function(d) {
          return d;
        });
        desc.transition().duration(1000).attr('x', function(d, idx) {
          return Math.max(xScale(d3.sum(values.slice(0, idx))), 50 * idx);
        });
        return group.selectAll('.border').data([0]).enter().append('rect').attr('class', 'border').attr('rx', borderRadius).attr('ry', borderRadius).attr('width', width).attr('height', height);
      };
      render(settings.values);
      return progress.update = function() {
        return render(settings.values);
      };
    };
    plugin.addConfigurations(settings, progress, ['total', 'values', 'asd'], [0, [80], 'to come']);
    return progress;
  };

  console.log('progress test');

  width = 8000;

  height = 6000;

  svg = d3.select('body').append('svg').attr('width', width).attr('height', height);

  progress = plugin.progress().values([
    {
      value: Math.random() * 50,
      description: 'Niklas'
    }, {
      value: Math.random() * 50,
      description: 'Doro'
    }, {
      value: Math.random() * 50,
      description: 'Milena'
    }
  ]).total(120);

  svg.append('g').attr('class', 'progress').attr('transform', "translate(" + 50. + ", " + 150. + ") scale(2.5)").call(progress);

  setInterval(function() {
    progress.values()[0].value = Math.random() * 50;
    progress.values()[1].value = Math.random() * 50;
    progress.values()[2].value = Math.random() * 50;
    return progress.update();
  }, 2000);

  svg.app;

}).call(this);

//# sourceMappingURL=data:application/json;base64,
