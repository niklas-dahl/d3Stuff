(function() {
  var g, gauge, gauge2, gauge3, height, i, plugin, svg, width;

  plugin = {};

  plugin.gauge = function() {
    var arcTween, bottumText, gauge, max, min, renderValue, value;
    min = 0;
    max = 100;
    value = 0;
    renderValue = 0;
    bottumText = 'Visitors';
    arcTween = function(arc, oldVal, newVal) {
      return function(d) {
        var i;
        i = d3.interpolateNumber(oldVal, newVal);
        return function(t) {
          return arc(i(t));
        };
      };
    };
    gauge = function(arcGroup) {
      var arc, arcElm, outerArc, text;
      arc = d3.svg.arc().startAngle(0).endAngle(function(d) {
        return d * 2 * Math.PI;
      }).innerRadius(85).outerRadius(110);
      outerArc = d3.svg.arc().startAngle(0).endAngle(Math.PI * 2).innerRadius(85).outerRadius(110);
      arcGroup.append('circle').attr('r', 85).attr('cx', 0).attr('cy', 0).attr('class', 'centerCircle');
      text = arcGroup.append('text').attr('y', 15).attr('class', 'innerText').text((Math.round(value)) + "%");
      arcGroup.append('text').attr('y', 150).style('text-anchor', 'middle').style('fill', 'black').style('font-size', '2em').text(bottumText);
      arcGroup.append('path').attr('d', outerArc).attr('class', 'outline');
      renderValue = value / (max - min);
      arcElm = arcGroup.append('path').data([renderValue]).attr('d', function(d) {
        return arc(d);
      }).attr('class', 'bar');
      return gauge.update = function() {
        arcElm.transition().duration(1000).ease('elastic').attrTween('d', arcTween(arc, renderValue, value / (max - min)));
        renderValue = value / (max - min);
        return text.text((Math.round(value)) + "%");
      };
    };
    gauge.min = function(newVal) {
      if (arguments.length === 0) {
        return min;
      }
      min = newVal;
      return gauge;
    };
    gauge.max = function(newVal) {
      if (arguments.length === 0) {
        return max;
      }
      max = newVal;
      return gauge;
    };
    gauge.value = function(newVal) {
      if (arguments.length === 0) {
        return value;
      }
      value = newVal;
      return gauge;
    };
    gauge.text = function(newVal) {
      if (arguments.length === 0) {
        return bottumText;
      }
      bottumText = newVal;
      return gauge;
    };
    return gauge;
  };

  console.log('gauge test');

  width = 800;

  height = 600;

  svg = d3.select('body').append('svg').attr('width', width).attr('height', height);

  gauge = plugin.gauge().min(0).max(100).value(60);

  gauge2 = plugin.gauge().value(10).text('Online');

  gauge3 = plugin.gauge().value(.9).text('Fehler Quote');

  svg.append('g').attr('id', 'gauge1').attr('class', 'gauge').attr('transform', "translate(" + 400. + ", " + (height / 2 - 20) + ") scale(2)").call(gauge2);

  svg.append('g').attr('id', 'gauge2').attr('class', 'gauge').attr('transform', "translate(" + 150. + ", " + (height / 2 + 150) + ")").call(gauge);

  svg.append('g').attr('id', 'gauge3').attr('class', 'gauge').attr('transform', "translate(" + 650. + ", " + (height / 2 + 150) + ")").call(gauge3);

  window.gauge = gauge;

  i = 0;

  g = .5;

  setInterval(function() {
    var newVal, oldVal;
    if (i >= 100) {
      g += .5;
      i = 0;
    }
    oldVal = i / 100;
    i += g * 10;
    newVal = i / 100;
    gauge.value(gauge.value() + Math.floor(Math.random() * 50) - 25).update();
    gauge2.value(gauge2.value() + Math.floor(Math.random() * 30) - 15).update();
    return gauge3.value(gauge3.value() + Math.floor(Math.random() * 30) - 15).update();
  }, 2000);

}).call(this);

//# sourceMappingURL=data:application/json;base64,
